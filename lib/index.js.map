{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap 0b15cfbb67de359d3c9b","webpack:///./src/math/vector.ts","webpack:///./~/babel-runtime/helpers/classCallCheck.js","webpack:///./~/babel-runtime/helpers/createClass.js","webpack:///./src/math/box.ts","webpack:///./~/core-js/library/modules/_descriptors.js","webpack:///./src/math/index.ts","webpack:///./src/math/polygon.ts","webpack:///./~/core-js/library/modules/_is-object.js","webpack:///./src/collision/response.ts","webpack:///./~/core-js/library/modules/_core.js","webpack:///./~/core-js/library/modules/_fails.js","webpack:///./~/core-js/library/modules/_global.js","webpack:///./~/core-js/library/modules/_object-dp.js","webpack:///./src/collision/util.ts","webpack:///./src/math/conversion.ts","webpack:///./src/index.ts","webpack:///./src/math/circle.ts","webpack:///./~/babel-runtime/core-js/object/define-property.js","webpack:///./~/core-js/library/fn/object/define-property.js","webpack:///./~/core-js/library/modules/_a-function.js","webpack:///./~/core-js/library/modules/_an-object.js","webpack:///./~/core-js/library/modules/_ctx.js","webpack:///./~/core-js/library/modules/_dom-create.js","webpack:///./~/core-js/library/modules/_export.js","webpack:///./~/core-js/library/modules/_has.js","webpack:///./~/core-js/library/modules/_hide.js","webpack:///./~/core-js/library/modules/_ie8-dom-define.js","webpack:///./~/core-js/library/modules/_property-desc.js","webpack:///./~/core-js/library/modules/_to-primitive.js","webpack:///./~/core-js/library/modules/es6.object.define-property.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","undefined","apply","_classCallCheck2","_createClass2","_interopRequireDefault","obj","default","_classCallCheck3","_createClass3","Vector","x","arguments","length","y","key","other","angle","Math","cos","sin","len","xs","ys","amt","dot","len2","axis","project","scale","projectN","sqrt","instance","Constructor","TypeError","_defineProperty","_defineProperty2","defineProperties","target","props","descriptor","writable","protoProps","staticProps","_polygon","_vector","_polygon2","_vector2","Box","pos","w","h","type","a","_circle","_box","Polygon","Circle","_circle2","_box2","points","offset","setPoints","calcPoints","edges","normals","push","_recalc","calcPoint","copy","rotate","p1","p2","e","sub","perp","normalize","xMin","yMin","xMax","yMax","point","clone","add","toPolygon","cx","cy","ar","it","_index","Response","b","overlapN","overlapV","clear","aInB","bInA","overlap","Number","MAX_VALUE","core","version","__e","exec","window","self","Function","__g","anObject","IE8_DOM_DEFINE","toPrimitive","dP","f","O","P","Attributes","_math","_response","flattenPointsOn","normal","result","min","max","isSeparatingAxis","aPos","bPos","aPoints","bPoints","response","rangeA","T_ARRAYS","pop","rangeB","offsetV","T_VECTORS","projectedOffset","_option","_option2","option1","option2","absOverlap","abs","reverse","voronoiRegion","line","dp","LEFT_VORONOI_REGION","RIGHT_VORONOI_REGION","MIDDLE_VORONOI_REGION","pointInCircle","differenceV","radiusSq","distanceSq","testPolygonPolygon","aLen","bLen","_i","_i2","pointInPolygon","poly","TEST_POINT","T_RESPONSE","testCircleCircle","totalRadius","totalRadiusSq","dist","testPolygonCircle","polygon","circle","circlePos","radius","radius2","edge","_i3","next","prev","region","point2","nextId","cross","distAbs","testCirclePolygon","_response2","convertBoxToPolygon","box","getAABBBox","r","corner","_util","_conversion","getAABB","$Object","desc","isObject","aFunction","fn","that","document","is","createElement","ctx","hide","has","$export","source","own","out","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","IS_BIND","B","IS_WRAP","W","expProto","C","virtual","R","U","createDesc","bitmap","val","toString","valueOf"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SAT-ts\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SAT-ts\"] = factory();\n\telse\n\t\troot[\"SAT-ts\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SAT-ts\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SAT-ts\"] = factory();\n\telse\n\t\troot[\"SAT-ts\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 15);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.classCallCheck, global.createClass);\n        global.vector = mod.exports;\n    }\n})(this, function (exports, _classCallCheck2, _createClass2) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n    var _createClass3 = _interopRequireDefault(_createClass2);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var Vector = function () {\n        function Vector() {\n            var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            (0, _classCallCheck3.default)(this, Vector);\n\n            this.x = x;\n            this.y = y;\n        }\n        // Copy the values of another Vector into this one.\n        /**\r\n          * @param {Vector} other The other Vector.\r\n          * @return {Vector} This for chaining.\r\n          */\n\n\n        (0, _createClass3.default)(Vector, [{\n            key: 'copy',\n            value: function copy(other) {\n                this.x = other.x;\n                this.y = other.y;\n                return this;\n            }\n        }, {\n            key: 'clone',\n            value: function clone() {\n                return new Vector(this.x, this.y);\n            }\n        }, {\n            key: 'perp',\n            value: function perp() {\n                var x = this.x;\n                this.x = this.y;\n                this.y = -x;\n                return this;\n            }\n        }, {\n            key: 'cross',\n            value: function cross(other) {\n                return this.x * other.y - this.y * other.x;\n            }\n        }, {\n            key: 'rotate',\n            value: function rotate(angle) {\n                var x = this.x;\n                var y = this.y;\n                this.x = x * Math.cos(angle) - y * Math.sin(angle);\n                this.y = x * Math.sin(angle) + y * Math.cos(angle);\n                return this;\n            }\n        }, {\n            key: 'reverse',\n            value: function reverse() {\n                this.x = -this.x;\n                this.y = -this.y;\n                return this;\n            }\n        }, {\n            key: 'normalize',\n            value: function normalize() {\n                var d = this.len();\n                if (d > 0) {\n                    this.x = this.x / d;\n                    this.y = this.y / d;\n                }\n                ;\n                return this;\n            }\n        }, {\n            key: 'add',\n            value: function add(other) {\n                this.x += other.x;\n                this.y += other.y;\n                return this;\n            }\n        }, {\n            key: 'sub',\n            value: function sub(other) {\n                this.x -= other.x;\n                this.y -= other.y;\n                return this;\n            }\n        }, {\n            key: 'scale',\n            value: function scale(xs, ys) {\n                this['x'] *= xs;\n                this['y'] *= ys || xs;\n                return this;\n            }\n        }, {\n            key: 'project',\n            value: function project(other) {\n                var amt = this.dot(other) / other.len2();\n                this.x = amt * other.x;\n                this.y = amt * other.y;\n                return this;\n            }\n        }, {\n            key: 'projectN',\n            value: function projectN(other) {\n                var amt = this.dot(other);\n                this.x = amt * other.x;\n                this.y = amt * other.y;\n                return this;\n            }\n        }, {\n            key: 'reflect',\n            value: function reflect(axis) {\n                var x = this.x;\n                var y = this.y;\n                this.project(axis).scale(2);\n                this.x -= x;\n                this.y -= y;\n                return this;\n            }\n        }, {\n            key: 'reflectN',\n            value: function reflectN(axis) {\n                var x = this.x;\n                var y = this.y;\n                this.projectN(axis).scale(2);\n                this.x -= x;\n                this.y -= y;\n                return this;\n            }\n        }, {\n            key: 'dot',\n            value: function dot(other) {\n                return this.x * other.x + this.y * other.y;\n            }\n        }, {\n            key: 'len2',\n            value: function len2() {\n                return this.dot(this);\n            }\n        }, {\n            key: 'len',\n            value: function len() {\n                return Math.sqrt(this.len2());\n            }\n        }]);\n        return Vector;\n    }();\n\n    exports.default = Vector;\n\n    ;\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _defineProperty = __webpack_require__(17);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(6), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('./polygon'), require('./vector'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.classCallCheck, global.createClass, global.polygon, global.vector);\n        global.box = mod.exports;\n    }\n})(this, function (exports, _classCallCheck2, _createClass2, _polygon, _vector) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n    var _createClass3 = _interopRequireDefault(_createClass2);\n\n    var _polygon2 = _interopRequireDefault(_polygon);\n\n    var _vector2 = _interopRequireDefault(_vector);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var Box = function () {\n        /**\r\n         * @param {Vector=} pos A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).\r\n         * @param {?number=} w The width of the box.\r\n         * @param {?number=} h The height of the box.\r\n         * @constructor\r\n         */\n        function Box() {\n            var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _vector2.default();\n            var w = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var h = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            (0, _classCallCheck3.default)(this, Box);\n\n            this.type = 'box';\n            this.pos = pos;\n            this.w = w;\n            this.h = h;\n        }\n\n        (0, _createClass3.default)(Box, [{\n            key: 'toPolygon',\n            value: function toPolygon() {\n                var pos = this.pos;\n                var w = this.w;\n                var h = this.h;\n                return new _polygon2.default(new _vector2.default(pos.x, pos.y), [new _vector2.default(), new _vector2.default(w, 0), new _vector2.default(w, h), new _vector2.default(0, h)]);\n            }\n        }]);\n        return Box;\n    }();\n\n    exports.default = Box;\n\n    ;\n});\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(10)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(0), __webpack_require__(16), __webpack_require__(6), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('./vector'), require('./circle'), require('./polygon'), require('./box'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.vector, global.circle, global.polygon, global.box);\n    global.index = mod.exports;\n  }\n})(this, function (exports, _vector, _circle, _polygon, _box) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Box = exports.Polygon = exports.Circle = exports.Vector = undefined;\n\n  var _vector2 = _interopRequireDefault(_vector);\n\n  var _circle2 = _interopRequireDefault(_circle);\n\n  var _polygon2 = _interopRequireDefault(_polygon);\n\n  var _box2 = _interopRequireDefault(_box);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  exports.Vector = _vector2.default;\n  exports.Circle = _circle2.default;\n  exports.Polygon = _polygon2.default;\n  exports.Box = _box2.default;\n});\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(3), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('./box'), require('./vector'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.classCallCheck, global.createClass, global.box, global.vector);\n        global.polygon = mod.exports;\n    }\n})(this, function (exports, _classCallCheck2, _createClass2, _box, _vector) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n    var _createClass3 = _interopRequireDefault(_createClass2);\n\n    var _box2 = _interopRequireDefault(_box);\n\n    var _vector2 = _interopRequireDefault(_vector);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var Polygon = function () {\n        function Polygon() {\n            var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _vector2.default();\n            var points = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n            (0, _classCallCheck3.default)(this, Polygon);\n\n            this.type = 'polygon';\n            this.pos = pos;\n            this.angle = 0;\n            this.offset = new _vector2.default();\n            this.setPoints(points);\n        }\n\n        (0, _createClass3.default)(Polygon, [{\n            key: 'setPoints',\n            value: function setPoints(points) {\n                var lengthChanged = !this['points'] || this.points.length !== points.length;\n                if (lengthChanged) {\n                    var i = void 0;\n                    var calcPoints = this.calcPoints = [];\n                    var edges = this.edges = [];\n                    var normals = this.normals = [];\n                    // Allocate the vector arrays for the calculated properties\n                    for (i = 0; i < points.length; i++) {\n                        calcPoints.push(new _vector2.default());\n                        edges.push(new _vector2.default());\n                        normals.push(new _vector2.default());\n                    }\n                    ;\n                }\n                ;\n                this.points = points;\n                this._recalc();\n                return this;\n            }\n        }, {\n            key: '_recalc',\n            value: function _recalc() {\n                var calcPoints = this.calcPoints;\n                var edges = this.edges;\n                var normals = this.normals;\n                var points = this.points;\n                var offset = this.offset;\n                var angle = this.angle;\n                var len = points.length;\n                var i = void 0;\n                for (i = 0; i < len; i++) {\n                    var calcPoint = calcPoints[i].copy(points[i]);\n                    calcPoint.x += offset.x;\n                    calcPoint.y += offset.y;\n                    if (angle !== 0) {\n                        calcPoint.rotate(angle);\n                    }\n                    ;\n                }\n                ;\n                for (i = 0; i < len; i++) {\n                    var p1 = calcPoints[i];\n                    var p2 = i < len - 1 ? calcPoints[i + 1] : calcPoints[0];\n                    var e = edges[i].copy(p2).sub(p1);\n                    normals[i].copy(e).perp().normalize();\n                }\n                ;\n                return this;\n            }\n        }, {\n            key: 'setAngle',\n            value: function setAngle(angle) {\n                this.angle = angle;\n                this._recalc();\n                return this;\n            }\n        }, {\n            key: 'setOffset',\n            value: function setOffset(offset) {\n                this.offset = offset;\n                this._recalc();\n                return this;\n            }\n        }, {\n            key: 'rotate',\n            value: function rotate(angle) {\n                var points = this.points;\n                var len = points.length;\n                for (var i = 0; i < len; i++) {\n                    points[i].rotate(angle);\n                }\n                ;\n                this._recalc();\n                return this;\n            }\n        }, {\n            key: 'translate',\n            value: function translate() {\n                var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n                var points = this.points;\n                var len = points.length;\n                for (var i = 0; i < len; i++) {\n                    points[i]['x'] += x;\n                    points[i]['y'] += y;\n                }\n                ;\n                this._recalc();\n                return this;\n            }\n        }, {\n            key: 'getAABB',\n            value: function getAABB() {\n                var points = this.calcPoints;\n                var len = points.length;\n                var xMin = points[0]['x'];\n                var yMin = points[0]['y'];\n                var xMax = xMin;\n                var yMax = yMin;\n                for (var i = 1; i < len; i++) {\n                    var point = points[i];\n                    if (point['x'] < xMin) {\n                        xMin = point['x'];\n                    } else if (point['x'] > xMax) {\n                        xMax = point['x'];\n                    }\n                    if (point['y'] < yMin) {\n                        yMin = point['y'];\n                    } else if (point['y'] > yMax) {\n                        yMax = point['y'];\n                    }\n                    ;\n                }\n                ;\n                return new _box2.default(this[\"pos\"].clone().add(new _vector2.default(xMin, yMin)), xMax - xMin, yMax - yMin).toPolygon();\n            }\n        }, {\n            key: 'getAABBBox',\n            value: function getAABBBox() {\n                var points = this.calcPoints;\n                var len = points.length;\n                var xMin = points[0]['x'];\n                var yMin = points[0]['y'];\n                var xMax = xMin;\n                var yMax = yMin;\n                for (var i = 1; i < len; i++) {\n                    var point = points[i];\n                    if (point['x'] < xMin) {\n                        xMin = point['x'];\n                    } else if (point['x'] > xMax) {\n                        xMax = point['x'];\n                    }\n                    if (point['y'] < yMin) {\n                        yMin = point['y'];\n                    } else if (point['y'] > yMax) {\n                        yMax = point['y'];\n                    }\n                    ;\n                }\n                ;\n                return new _box2.default(this[\"pos\"].clone().add(new _vector2.default(xMin, yMin)), xMax - xMin, yMax - yMin);\n            }\n        }, {\n            key: 'getCentroid',\n            value: function getCentroid() {\n                var points = this['calcPoints'];\n                var len = points.length;\n                var cx = 0;\n                var cy = 0;\n                var ar = 0;\n                for (var i = 0; i < len; i++) {\n                    var p1 = points[i];\n                    var p2 = i === len - 1 ? points[0] : points[i + 1];\n                    var a = p1['x'] * p2['y'] - p1['y'] * p2['x'];\n                    cx += (p1['x'] + p2['x']) * a;\n                    cy += (p1['y'] + p2['y']) * a;\n                    ar += a;\n                }\n                ;\n                ar = ar * 3;\n                cx = cx / ar;\n                cy = cy / ar;\n                return new _vector2.default(cx, cy);\n            }\n        }, {\n            key: 'toPolygon',\n            value: function toPolygon() {\n                return this;\n            }\n        }]);\n        return Polygon;\n    }();\n\n    exports.default = Polygon;\n\n    ;\n});\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require(\"babel-runtime/helpers/classCallCheck\"), require(\"babel-runtime/helpers/createClass\"), require(\"../math/index\"));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.classCallCheck, global.createClass, global.index);\n        global.response = mod.exports;\n    }\n})(this, function (exports, _classCallCheck2, _createClass2, _index) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n    var _createClass3 = _interopRequireDefault(_createClass2);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var Response = function () {\n        // ## Response\n        //\n        // An object representing the result of an intersection. Contains:\n        //  - The two objects participating in the intersection\n        //  - The vector representing the minimum change necessary to extract the first object\n        //    from the second one (as well as a unit vector in that direction and the magnitude\n        //    of the overlap)\n        //  - Whether the first object is entirely inside the second, and vice versa.\n        /**\r\n         * @constructor\r\n         */\n        function Response() {\n            (0, _classCallCheck3.default)(this, Response);\n\n            this.a = null;\n            this.b = null;\n            this.overlapN = new _index.Vector();\n            this.overlapV = new _index.Vector();\n            this.clear();\n        }\n\n        (0, _createClass3.default)(Response, [{\n            key: \"clear\",\n            value: function clear() {\n                this.aInB = true;\n                this.bInA = true;\n                this.overlap = Number.MAX_VALUE;\n            }\n        }]);\n        return Response;\n    }();\n\n    exports.default = Response;\n});\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\nvar core = module.exports = { version: '2.6.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(20);\nvar IE8_DOM_DEFINE = __webpack_require__(26);\nvar toPrimitive = __webpack_require__(28);\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(4) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(5), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('../math'), require('./response'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.math, global.response);\n        global.util = mod.exports;\n    }\n})(this, function (exports, _math, _response) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.isSeparatingAxis = isSeparatingAxis;\n    exports.pointInCircle = pointInCircle;\n    exports.testPolygonPolygon = testPolygonPolygon;\n    exports.pointInPolygon = pointInPolygon;\n    exports.testCircleCircle = testCircleCircle;\n    exports.testPolygonCircle = testPolygonCircle;\n    exports.testCirclePolygon = testCirclePolygon;\n\n    var _response2 = _interopRequireDefault(_response);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    // ## Object Pools\n    // A pool of `Vector` objects that are used in calculations to avoid\n    // allocating memory.\n    /**\r\n     * @type {Array.<Vector>}\r\n     */\n    var T_VECTORS = [];\n    for (var i = 0; i < 10; i++) {\n        T_VECTORS.push(new _math.Vector());\n    }\n    // A pool of arrays of numbers used in calculations to avoid allocating\n    // memory.\n    /**\r\n     * @type {Array.<Array.<number>>}\r\n     */\n    var T_ARRAYS = [];\n    for (var i = 0; i < 5; i++) {\n        T_ARRAYS.push([]);\n    }\n    // Temporary response used for polygon hit detection.\n    /**\r\n     * @type {Response}\r\n     */\n    var T_RESPONSE = new _response2.default();\n    // Tiny \"point\" polygon used for polygon hit detection.\n    /**\r\n     * @type {Polygon}\r\n     */\n    var TEST_POINT = new _math.Box(new _math.Vector(), 0.000001, 0.000001).toPolygon();\n    // ## Helper Functions\n    // Flattens the specified array of points onto a unit vector axis,\n    // resulting in a one dimensional range of the minimum and\n    // maximum value on that axis.\n    /**\r\n     * @param {Array.<Vector>} points The points to flatten.\r\n     * @param {Vector} normal The unit vector axis to flatten on.\r\n     * @param {Array.<number>} result An array.  After calling this function,\r\n     *   result[0] will be the minimum value,\r\n     *   result[1] will be the maximum value.\r\n     */\n    function flattenPointsOn(points, normal, result) {\n        var min = Number.MAX_VALUE;\n        var max = -Number.MAX_VALUE;\n        var len = points.length;\n        for (var i = 0; i < len; i++) {\n            // The magnitude of the projection of the point onto the normal\n            var dot = points[i].dot(normal);\n            if (dot < min) min = dot;\n            if (dot > max) max = dot;\n        }\n        result[0] = min;\n        result[1] = max;\n    }\n    // Check whether two convex polygons are separated by the specified\n    // axis (must be a unit vector).\n    /**\r\n     * @param {Vector} aPos The position of the first polygon.\r\n     * @param {Vector} bPos The position of the second polygon.\r\n     * @param {Array.<Vector>} aPoints The points in the first polygon.\r\n     * @param {Array.<Vector>} bPoints The points in the second polygon.\r\n     * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons\r\n     *   will be projected onto this axis.\r\n     * @param {Response=} response A Response object (optional) which will be populated\r\n     *   if the axis is not a separating axis.\r\n     * @return {boolean} true if it is a separating axis, false otherwise.  If false,\r\n     *   and a response is passed in, information about how much overlap and\r\n     *   the direction of the overlap will be populated.\r\n     */\n    function isSeparatingAxis(aPos, bPos, aPoints, bPoints, axis, response) {\n        var rangeA = T_ARRAYS.pop();\n        var rangeB = T_ARRAYS.pop();\n        // The magnitude of the offset between the two polygons\n        var offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);\n        var projectedOffset = offsetV.dot(axis);\n        // Project the polygons onto the axis.\n        flattenPointsOn(aPoints, axis, rangeA);\n        flattenPointsOn(bPoints, axis, rangeB);\n        // Move B's range to its position relative to A.\n        rangeB[0] += projectedOffset;\n        rangeB[1] += projectedOffset;\n        if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\n            T_VECTORS.push(offsetV);\n            T_ARRAYS.push(rangeA);\n            T_ARRAYS.push(rangeB);\n            return true;\n        }\n        // This is not a separating axis. If we're calculating a response, calculate the overlap.\n        if (response) {\n            var overlap = 0;\n            // A starts further left than B\n            if (rangeA[0] < rangeB[0]) {\n                response['aInB'] = false;\n                // A ends before B does. We have to pull A out of B\n                if (rangeA[1] < rangeB[1]) {\n                    overlap = rangeA[1] - rangeB[0];\n                    response['bInA'] = false;\n                    // B is fully inside A.  Pick the shortest way out.\n                } else {\n                    var _option = rangeA[1] - rangeB[0];\n                    var _option2 = rangeB[1] - rangeA[0];\n                    overlap = _option < _option2 ? _option : -_option2;\n                }\n            } else {\n                response['bInA'] = false;\n                // B ends before A ends. We have to push A out of B\n                if (rangeA[1] > rangeB[1]) {\n                    overlap = rangeA[0] - rangeB[1];\n                    response['aInB'] = false;\n                } else {\n                    // A is fully inside B.  Pick the shortest way out.\n                    var option1 = rangeA[1] - rangeB[0];\n                    var option2 = rangeB[1] - rangeA[0];\n                    overlap = option1 < option2 ? option1 : -option2;\n                }\n            }\n            // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\n            var absOverlap = Math.abs(overlap);\n            if (absOverlap < response['overlap']) {\n                response['overlap'] = absOverlap;\n                response['overlapN'].copy(axis);\n                if (overlap < 0) {\n                    response['overlapN'].reverse();\n                }\n            }\n        }\n        T_VECTORS.push(offsetV);\n        T_ARRAYS.push(rangeA);\n        T_ARRAYS.push(rangeB);\n        return false;\n    }\n    // Constants for Voronoi regions\n    /**\r\n     * @const\r\n     */\n    var LEFT_VORONOI_REGION = -1;\n    /**\r\n     * @const\r\n     */\n    var MIDDLE_VORONOI_REGION = 0;\n    /**\r\n     * @const\r\n     */\n    var RIGHT_VORONOI_REGION = 1;\n    // Calculates which Voronoi region a point is on a line segment.\n    // It is assumed that both the line and the point are relative to `(0,0)`\n    //\n    //            |       (0)      |\n    //     (-1)  [S]--------------[E]  (1)\n    //            |       (0)      |\n    /**\r\n     * @param {Vector} line The line segment.\r\n     * @param {Vector} point The point.\r\n     * @return  {number} LEFT_VORONOI_REGION (-1) if it is the left region,\r\n     *          MIDDLE_VORONOI_REGION (0) if it is the middle region,\r\n     *          RIGHT_VORONOI_REGION (1) if it is the right region.\r\n     */\n    function voronoiRegion(line, point) {\n        var len2 = line.len2();\n        var dp = point.dot(line);\n        // If the point is beyond the start of the line, it is in the\n        // left voronoi region.\n        if (dp < 0) {\n            return LEFT_VORONOI_REGION;\n            // If the point is beyond the end of the line, it is in the\n            // right voronoi region.\n        } else if (dp > len2) {\n            return RIGHT_VORONOI_REGION;\n            // Otherwise, it's in the middle one.\n        } else {\n            return MIDDLE_VORONOI_REGION;\n        }\n    }\n    // ## Collision Tests\n    // Check if a point is inside a circle.\n    /**\r\n     * @param {Vector} p The point to test.\r\n     * @param {Circle} c The circle to test.\r\n     * @return {boolean} true if the point is inside the circle, false if it is not.\r\n     */\n    function pointInCircle(p, c) {\n        var differenceV = T_VECTORS.pop().copy(p).sub(c['pos']);\n        var radiusSq = c['r'] * c['r'];\n        var distanceSq = differenceV.len2();\n        T_VECTORS.push(differenceV);\n        // If the distance between is smaller than the radius then the point is inside the circle.\n        return distanceSq <= radiusSq;\n    }\n    // Checks whether polygons collide.\n    /**\r\n     * @param {Polygon} a The first polygon.\r\n     * @param {Polygon} b The second polygon.\r\n     * @param {Response=} response Response object (optional) that will be populated if\r\n     *   they interset.\r\n     * @return {boolean} true if they intersect, false if they don't.\r\n     */\n    function testPolygonPolygon(a, b, response) {\n        var aPoints = a['calcPoints'];\n        var aLen = aPoints.length;\n        var bPoints = b['calcPoints'];\n        var bLen = bPoints.length;\n        // If any of the edge normals of A is a separating axis, no intersection.\n        for (var _i = 0; _i < aLen; _i++) {\n            if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, a['normals'][_i], response)) {\n                return false;\n            }\n        }\n        for (var _i2 = 0; _i2 < bLen; _i2++) {\n            if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, b['normals'][_i2], response)) {\n                return false;\n            }\n        }\n        // Since none of the edge normals of A or B are a separating axis, there is an intersection\n        // and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the\n        // final overlap vector.\n        if (response) {\n            response['a'] = a;\n            response['b'] = b;\n            response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\n        }\n        return true;\n    }\n    // Check if a point is inside a convex polygon.\n    /**\r\n     * @param {Vector} p The point to test.\r\n     * @param {Polygon} poly The polygon to test.\r\n     * @return {boolean} true if the point is inside the polygon, false if it is not.\r\n     */\n    function pointInPolygon(p, poly) {\n        TEST_POINT['pos'].copy(p);\n        T_RESPONSE.clear();\n        var result = testPolygonPolygon(TEST_POINT, poly, T_RESPONSE);\n        if (result) {\n            result = T_RESPONSE['aInB'];\n        }\n        return result;\n    }\n    // Check if two circles collide.\n    /**\r\n     * @param {Circle} a The first circle.\r\n     * @param {Circle} b The second circle.\r\n     * @param {Response=} response Response object (optional) that will be populated if\r\n     *   the circles intersect.\r\n     * @return {boolean} true if the circles intersect, false if they don't.\r\n     */\n    function testCircleCircle(a, b, response) {\n        // Check if the distance between the centers of the two\n        // circles is greater than their combined radius.\n        var differenceV = T_VECTORS.pop().copy(b['pos']).sub(a['pos']);\n        var totalRadius = a['r'] + b['r'];\n        var totalRadiusSq = totalRadius * totalRadius;\n        var distanceSq = differenceV.len2();\n        // If the distance is bigger than the combined radius, they don't intersect.\n        if (distanceSq > totalRadiusSq) {\n            T_VECTORS.push(differenceV);\n            return false;\n        }\n        // They intersect.  If we're calculating a response, calculate the overlap.\n        if (response) {\n            var dist = Math.sqrt(distanceSq);\n            response['a'] = a;\n            response['b'] = b;\n            response['overlap'] = totalRadius - dist;\n            response['overlapN'].copy(differenceV.normalize());\n            response['overlapV'].copy(differenceV).scale(response['overlap']);\n            response['aInB'] = a['r'] <= b['r'] && dist <= b['r'] - a['r'];\n            response['bInA'] = b['r'] <= a['r'] && dist <= a['r'] - b['r'];\n        }\n        T_VECTORS.push(differenceV);\n        return true;\n    }\n    // Check if a polygon and a circle collide.\n    /**\r\n     * @param {Polygon} polygon The polygon.\r\n     * @param {Circle} circle The circle.\r\n     * @param {Response=} response Response object (optional) that will be populated if\r\n     *   they interset.\r\n     * @return {boolean} true if they intersect, false if they don't.\r\n     */\n    function testPolygonCircle(polygon, circle, response) {\n        // Get the position of the circle relative to the polygon.\n        var circlePos = T_VECTORS.pop().copy(circle['pos']).sub(polygon['pos']);\n        var radius = circle['r'];\n        var radius2 = radius * radius;\n        var points = polygon['calcPoints'];\n        var len = points.length;\n        var edge = T_VECTORS.pop();\n        var point = T_VECTORS.pop();\n        // For each edge in the polygon:\n        for (var _i3 = 0; _i3 < len; _i3++) {\n            var next = _i3 === len - 1 ? 0 : _i3 + 1;\n            var prev = _i3 === 0 ? len - 1 : _i3 - 1;\n            var overlap = 0;\n            var overlapN = null;\n            // Get the edge.\n            edge.copy(polygon['edges'][_i3]);\n            // Calculate the center of the circle relative to the starting point of the edge.\n            point.copy(circlePos).sub(points[_i3]);\n            // If the distance between the center of the circle and the point\n            // is bigger than the radius, the polygon is definitely not fully in\n            // the circle.\n            if (response && point.len2() > radius2) {\n                response['aInB'] = false;\n            }\n            // Calculate which Voronoi region the center of the circle is in.\n            var region = voronoiRegion(edge, point);\n            // If it's the left region:\n            if (region === LEFT_VORONOI_REGION) {\n                // We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.\n                edge.copy(polygon['edges'][prev]);\n                // Calculate the center of the circle relative the starting point of the previous edge\n                var point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);\n                region = voronoiRegion(edge, point2);\n                if (region === RIGHT_VORONOI_REGION) {\n                    // It's in the region we want.  Check if the circle intersects the point.\n                    var dist = point.len();\n                    if (dist > radius) {\n                        // No intersection\n                        T_VECTORS.push(circlePos);\n                        T_VECTORS.push(edge);\n                        T_VECTORS.push(point);\n                        T_VECTORS.push(point2);\n                        return false;\n                    } else if (response) {\n                        // It intersects, calculate the overlap.\n                        response['bInA'] = false;\n                        overlapN = point.normalize();\n                        overlap = radius - dist;\n                    }\n                }\n                T_VECTORS.push(point2);\n                // If it's the right region:\n            } else if (region === RIGHT_VORONOI_REGION) {\n                // We need to make sure we're in the left region on the next edge\n                edge.copy(polygon['edges'][next]);\n                // Calculate the center of the circle relative to the starting point of the next edge.\n                point.copy(circlePos).sub(points[next]);\n                region = voronoiRegion(edge, point);\n                if (region === LEFT_VORONOI_REGION) {\n                    // It's in the region we want.  Check if the circle intersects the point.\n                    var dist = point.len();\n                    if (dist > radius) {\n                        // No intersection\n                        T_VECTORS.push(circlePos);\n                        T_VECTORS.push(edge);\n                        T_VECTORS.push(point);\n                        return false;\n                    } else if (response) {\n                        // It intersects, calculate the overlap.\n                        response['bInA'] = false;\n                        overlapN = point.normalize();\n                        overlap = radius - dist;\n                    }\n                }\n                // Otherwise, it's the middle region:\n            } else {\n                //To check if the polygon is clockwise, we get the cross product\n                var nextId = (next + 1) % polygon['points'].length;\n                var cross = edge.cross(new _math.Vector(polygon['points'][nextId].x - polygon['points'][_i3].x, polygon['points'][nextId].y - polygon['points'][_i3].y));\n                // Need to check if the circle is intersecting the edge,\n                // Change the edge into its \"edge normal\".\n                var normal = edge.perp().normalize();\n                //If it's clockwise, we inverse the normal\n                if (cross < 0) {\n                    normal.reverse();\n                }\n                // Find the perpendicular distance between the center of the\n                // circle and the edge.\n                var dist = point.dot(normal);\n                var distAbs = Math.abs(dist);\n                // If the circle is on the outside of the edge, there is no intersection.\n                if (dist > 0 && distAbs > radius) {\n                    // No intersection\n                    T_VECTORS.push(circlePos);\n                    T_VECTORS.push(normal);\n                    T_VECTORS.push(point);\n                    return false;\n                } else if (response) {\n                    // It intersects, calculate the overlap.\n                    overlapN = normal;\n                    overlap = radius - dist;\n                    // If the center of the circle is on the outside of the edge, or part of the\n                    // circle is on the outside, the circle is not fully inside the polygon.\n                    if (dist >= 0 || overlap < 2 * radius) {\n                        response['bInA'] = false;\n                    }\n                }\n            }\n            // If this is the smallest overlap we've seen, keep it.\n            // (overlapN may be null if the circle was in the wrong Voronoi region).\n            if (overlapN && response && Math.abs(overlap) < Math.abs(response['overlap'])) {\n                response['overlap'] = overlap;\n                response['overlapN'].copy(overlapN);\n            }\n        }\n        // Calculate the final overlap vector - based on the smallest overlap.\n        if (response) {\n            response['a'] = polygon;\n            response['b'] = circle;\n            response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\n        }\n        T_VECTORS.push(circlePos);\n        T_VECTORS.push(edge);\n        T_VECTORS.push(point);\n        return true;\n    }\n    // Check if a circle and a polygon collide.\n    //\n    // **NOTE:** This is slightly less efficient than polygonCircle as it just\n    // runs polygonCircle and reverses everything at the end.\n    /**\r\n     * @param {Circle} circle The circle.\r\n     * @param {Polygon} polygon The polygon.\r\n     * @param {Response=} response Response object (optional) that will be populated if\r\n     *   they interset.\r\n     * @return {boolean} true if they intersect, false if they don't.\r\n     */\n    function testCirclePolygon(circle, polygon, response) {\n        // Test the polygon against the circle.\n        var result = testPolygonCircle(polygon, circle, response);\n        if (result && response) {\n            // Swap A and B in the response.\n            var a = response['a'];\n            var aInB = response['aInB'];\n            response['overlapN'].reverse();\n            response['overlapV'].reverse();\n            response['a'] = response['b'];\n            response['b'] = a;\n            response['aInB'] = response['bInA'];\n            response['bInA'] = aInB;\n        }\n        return result;\n    }\n});\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(6), __webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require(\"./polygon\"), require(\"./vector\"), require(\"./box\"));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.polygon, global.vector, global.box);\n        global.conversion = mod.exports;\n    }\n})(this, function (exports, _polygon, _vector, _box) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.convertBoxToPolygon = convertBoxToPolygon;\n    exports.getAABBBox = getAABBBox;\n\n    var _polygon2 = _interopRequireDefault(_polygon);\n\n    var _vector2 = _interopRequireDefault(_vector);\n\n    var _box2 = _interopRequireDefault(_box);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    function convertBoxToPolygon(box) {\n        return new _polygon2.default(new _vector2.default(box.pos.x, box.pos.y), [new _vector2.default(), new _vector2.default(box.w, 0), new _vector2.default(box.w, box.h), new _vector2.default(0, box.h)]);\n    }\n    function getAABBBox(polygon) {\n        if (polygon.r) {\n            var r = polygon.r;\n            var corner = new _vector2.default(polygon.pos.x - r, polygon.pos.y - r);\n            return new _box2.default(corner, r * 2, r * 2);\n        }\n        var points = polygon.calcPoints;\n        var len = points.length;\n        var xMin = points[0]['x'];\n        var yMin = points[0]['y'];\n        var xMax = xMin;\n        var yMax = yMin;\n        for (var i = 1; i < len; i++) {\n            var point = points[i];\n            if (point['x'] < xMin) {\n                xMin = point['x'];\n            } else if (point['x'] > xMax) {\n                xMax = point['x'];\n            }\n            if (point['y'] < yMin) {\n                yMin = point['y'];\n            } else if (point['y'] > yMax) {\n                yMax = point['y'];\n            }\n            ;\n        }\n        ;\n        var pos = { x: polygon.pos.x + xMin, y: polygon.pos.y + yMin };\n        return new _box2.default(new _vector2.default(pos.x, pos.y), xMax - xMin, yMax - yMin);\n    }\n});\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(5), __webpack_require__(8), __webpack_require__(13), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('./math'), require('./collision/response'), require('./collision/util'), require('./math/conversion'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.math, global.response, global.util, global.conversion);\n    global.index = mod.exports;\n  }\n})(this, function (exports, _math, _response, _util, _conversion) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getAABBBox = exports.convertBoxToPolygon = exports.testCirclePolygon = exports.testPolygonPolygon = exports.testPolygonCircle = exports.testCircleCircle = exports.Response = exports.Polygon = exports.Circle = exports.Vector = exports.Box = undefined;\n\n  var _response2 = _interopRequireDefault(_response);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  exports.Box = _math.Box;\n  exports.Vector = _math.Vector;\n  exports.Circle = _math.Circle;\n  exports.Polygon = _math.Polygon;\n  exports.Response = _response2.default;\n  exports.testCircleCircle = _util.testCircleCircle;\n  exports.testPolygonCircle = _util.testPolygonCircle;\n  exports.testPolygonPolygon = _util.testPolygonPolygon;\n  exports.testCirclePolygon = _util.testCirclePolygon;\n  exports.convertBoxToPolygon = _conversion.convertBoxToPolygon;\n  exports.getAABBBox = _conversion.getAABBBox;\n});\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(3), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('./box'), require('./vector'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.classCallCheck, global.createClass, global.box, global.vector);\n        global.circle = mod.exports;\n    }\n})(this, function (exports, _classCallCheck2, _createClass2, _box, _vector) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n    var _createClass3 = _interopRequireDefault(_createClass2);\n\n    var _box2 = _interopRequireDefault(_box);\n\n    var _vector2 = _interopRequireDefault(_vector);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var Circle = function () {\n        // ## Circle\n        //\n        // Represents a circle with a position and a radius.\n        // Create a new circle, optionally passing in a position and/or radius. If no position\n        // is given, the circle will be at `(0,0)`. If no radius is provided, the circle will\n        // have a radius of `0`.\n        /**\r\n         * @param {Vector=} pos A vector representing the position of the center of the circle\r\n         * @param {?number=} r The radius of the circle\r\n         * @constructor\r\n         */\n        function Circle() {\n            var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _vector2.default();\n            var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            (0, _classCallCheck3.default)(this, Circle);\n\n            this.type = 'circle';\n            this.pos = pos;\n            this.r = r;\n        }\n\n        (0, _createClass3.default)(Circle, [{\n            key: 'getAABB',\n            value: function getAABB() {\n                var r = this.r;\n                var corner = this.pos.clone().sub(new _vector2.default(r, r));\n                return new _box2.default(corner, r * 2, r * 2).toPolygon();\n            }\n        }, {\n            key: 'getAABBBox',\n            value: function getAABBBox() {\n                var r = this.r;\n                var corner = this.pos.clone().sub(new _vector2.default(r, r));\n                return new _box2.default(corner, r * 2, r * 2);\n            }\n        }, {\n            key: 'toPolygon',\n            value: function toPolygon() {\n                return this.getAABB();\n            }\n        }]);\n        return Circle;\n    }();\n\n    exports.default = Circle;\n\n    ;\n});\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(18), __esModule: true };\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(29);\nvar $Object = __webpack_require__(9).Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(7);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(19);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(7);\nvar document = __webpack_require__(11).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(11);\nvar core = __webpack_require__(9);\nvar ctx = __webpack_require__(21);\nvar hide = __webpack_require__(25);\nvar has = __webpack_require__(24);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(12);\nvar createDesc = __webpack_require__(27);\nmodule.exports = __webpack_require__(4) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(4) && !__webpack_require__(10)(function () {\n  return Object.defineProperty(__webpack_require__(22)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(7);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(23);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__webpack_require__(4), 'Object', { defineProperty: __webpack_require__(12).f });\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0b15cfbb67de359d3c9b","\nexport default class Vector{\n    x:number;\n    \n    y:number;\n\n    constructor(x:number = 0,y:number = 0){\n        this.x = x;\n        this.y = y;\n    }\n\n // Copy the values of another Vector into this one.\n /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaining.\n   */\n    copy(other: Vector):Vector{\n        this.x = other.x;\n\n        this.y = other.y;\n\n        return this;\n    }\n\n  // Create a new vector with the same coordinates as this on.\n  /**\n   * @return {Vector} The new cloned vector\n   */\n  clone():Vector{\n      return new Vector(this.x,this.y);\n  }\n\n  // Change this vector to be perpendicular to what it was before. (Effectively\n  // roatates it 90 degrees in a clockwise direction)\n  /**\n   * @return {Vector} This for chaining.\n   */\n  perp():Vector{\n      var x = this.x;\n      this.x = this.y;\n      this.y = -x;\n      return this;\n  }\n\n  // Get the cross product between this vector and another\n  /**\n   * @param {Vector} other The vector to cross this one against \n   * @return {number} Result of the cross product\n   */\n  cross(other:Vector):number{\n    return this.x * other.y - this.y * other.x;\n  }\n\n  // Rotate this vector (counter-clockwise) by the specified angle (in radians).\n  /**\n   * @param {number} angle The angle to rotate (in radians)\n   * @return {Vector} This for chaining.\n   */\n  rotate(angle:number):Vector{\n      var x = this.x;\n\n      var y = this.y;\n\n      this.x = x * Math.cos(angle) - y * Math.sin(angle);\n\n      this.y = x * Math.sin(angle) + y * Math.cos(angle);\n\n      return this;\n  };\n\n  // Reverse this vector.\n  /**\n   * @return {Vector} This for chaining.\n   */\n  reverse():Vector{\n      this.x = -this.x;\n\n      this.y = -this.y;\n\n      return this;\n  };\n\n\n  // Normalize this vector.  (make it have length of `1`)\n  /**\n   * @return {Vector} This for chaining.\n   */\n  normalize():Vector{\n\n      let d = this.len();\n\n      if(d>0){\n\n          this.x = this.x/d;\n\n          this.y = this.y/d;\n      };\n\n      return this;\n  };\n\n  // Add another vector to this one.\n  /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaining.\n   */\n  add(other:{x:number,y:number}): Vector{\n      this.x+=other.x;\n\n      this.y+=other.y;\n\n      return this;\n  };\n\n  // Subtract another vector from this one.\n  /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaiing.\n   */\n  sub(other:{x:number, y:number}):Vector{\n    this.x-=other.x;\n\n    this.y-=other.y;\n\n    return this;\n  };\n\n  // Scale this vector. An independant scaling factor can be provided\n  // for each axis, or a single scaling factor that will scale both `x` and `y`.\n  /**\n   * @param {number} x The scaling factor in the x direction.\n   * @param {?number=} y The scaling factor in the y direction.  If this\n   *   is not specified, the x scaling factor will be used.\n   * @return {Vector} This for chaining.\n   */\n  scale(xs:number,ys?:number){\n    this['x'] *= xs;\n\n    this['y'] *= ys || xs;\n\n    return this;\n  };\n\n  // Project this vector on to another vector.\n  /**\n   * @param {Vector} other The vector to project onto.\n   * @return {Vector} This for chaining.\n   */\n  project(other:Vector):Vector{\n      let amt = this.dot(other)/other.len2();\n\n      this.x = amt * other.x;\n\n      this.y = amt * other.y;\n\n      return this;\n  };\n\n  // Project this vector onto a vector of unit length. This is slightly more efficient\n  // than `project` when dealing with unit vectors.\n  /**\n   * @param {Vector} other The unit vector to project onto.\n   * @return {Vector} This for chaining.\n   */\n  projectN(other:Vector):Vector{\n      var amt = this.dot(other);\n\n      this.x = amt * other.x;\n\n      this.y = amt * other.y;\n\n      return this;\n  };\n\n  // Reflect this vector on an arbitrary axis.\n  /**\n   * @param {Vector} axis The vector representing the axis.\n   * @return {Vector} This for chaining.\n   */\n  reflect(axis:Vector):Vector{\n      var x = this.x;\n\n      var y = this.y;\n\n      this.project(axis).scale(2);\n\n      this.x-=x;\n\n      this.y-=y;\n\n      return this;\n  };\n\n  // Reflect this vector on an arbitrary axis (represented by a unit vector). This is\n  // slightly more efficient than `reflect` when dealing with an axis that is a unit vector.\n  /**\n   * @param {Vector} axis The unit vector representing the axis.\n   * @return {Vector} This for chaining.\n   */\n  reflectN(axis:Vector):Vector{\n    var x = this.x;\n\n    var y = this.y;\n\n    this.projectN(axis).scale(2);\n\n    this.x-=x;\n\n    this.y-=y;\n\n    return this;\n};\n\n  // Get the dot product of this vector and another.\n  /**\n   * @param {Vector}  other The vector to dot this one against.\n   * @return {number} The dot product.\n   */\n  dot(other:Vector):number{\n      return this.x * other.x + this.y * other.y;\n  };\n\n  // Get the squared length of this vector.\n  /**\n   * @return {number} The length^2 of this vector.\n   */\n  len2():number{\n      return this.dot(this);\n  };\n\n  // Get the length of this vector.\n  /**\n   * @return {number} The length of this vector.\n   */\n  len():number{\n      return Math.sqrt(this.len2());\n  };\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/vector.ts","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/helpers/classCallCheck.js\n// module id = 1\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/helpers/createClass.js\n// module id = 2\n// module chunks = 0","    import Polygon from './polygon';\nimport Vector from './vector';\n    // ## Box\n    //\n    // Represents an axis-aligned box, with a width and height.\n\n\n    // Create a new box, with the specified position, width, and height. If no position\n    // is given, the position will be `(0,0)`. If no width or height are given, they will\n    // be set to `0`.\n    export default class Box {\n        type: 'box' = 'box';\n        \n    /**\n     * @param {Vector=} pos A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).\n     * @param {?number=} w The width of the box.\n     * @param {?number=} h The height of the box.\n     * @constructor\n     */\n    constructor(pos:Vector = new Vector(), w:number = 0, h:number = 0){\n        this.pos = pos;\n\n        this.w = w;\n\n        this.h = h;\n    };\n\n    pos: Vector;\n    \n    w: number;\n    \n    h: number;\n\n    // Returns a polygon whose edges are the same as this box.\n    /**\n     * @return {Polygon} A new Polygon that represents this box.\n     */\n    toPolygon():Polygon{\n        let pos = this.pos;\n        let w = this.w;\n        let h = this.h;\n\n        return new Polygon(new Vector(pos.x, pos.y),[\n            new Vector(), new Vector(w, 0),\n            new Vector(w, h), new Vector(0,h)\n        ]);\n    };\n\n};\n\n\n// WEBPACK FOOTER //\n// ./src/math/box.ts","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_descriptors.js\n// module id = 4\n// module chunks = 0","import Vector from './vector';\nimport Circle from './circle';\nimport Polygon from './polygon';\nimport Box from './box';\n\nexport {Vector};\nexport {Circle};\nexport {Polygon};\nexport {Box};\n\n\n// WEBPACK FOOTER //\n// ./src/math/index.ts","  // ## Polygon\n  //\n  // Represents a *convex* polygon with any number of points (specified in counter-clockwise order)\n  //\n  // Note: Do _not_ manually change the `points`, `angle`, or `offset` properties. Use the\n  // provided setters. Otherwise the calculated properties will not be updated correctly.\n  //\n  // `pos` can be changed directly.\n\n  // Create a new polygon, passing in a position vector, and an array of points (represented\n  // by vectors relative to the position vector). If no position is passed in, the position\n  // of the polygon will be `(0,0)`.\n  /**\n   * @param {Vector=} pos A vector representing the origin of the polygon. (all other\n   *   points are relative to this one)\n   * @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,\n   *   in counter-clockwise order.\n   * @constructor\n   */\n\n   import Box from './box';\nimport Vector from './vector';\n\n   export default class Polygon{\n       type: 'polygon' = 'polygon';\n       pos: Vector;\n\n       angle: number;\n\n       offset: Vector;\n\n       points: Array<Vector>;\n\n       calcPoints: Array<Vector>;\n\n       edges: Array<Vector>;\n\n       normals: Array<Vector>;\n\n       constructor(pos:Vector = new Vector(), points:Array<Vector> = []){\n           this.pos = pos;\n\n           this.angle = 0;\n\n           this.offset = new Vector();\n\n           this.setPoints(points);\n       };\n\n\n        // Set the points of the polygon.\n        //\n        // Note: The points are counter-clockwise *with respect to the coordinate system*.\n        // If you directly draw the points on a screen that has the origin at the top-left corner\n        // it will _appear_ visually that the points are being specified clockwise. This is just\n        // because of the inversion of the Y-axis when being displayed.\n        /**\n         * @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,\n         *   in counter-clockwise order.\n         * @return {Polygon} This for chaining.\n         */\n       setPoints(points:Array<Vector>):Polygon{\n           let lengthChanged = !this['points'] || this.points.length !== points.length;\n\n           if(lengthChanged){\n                let i;\n                let calcPoints:any = this.calcPoints = [];\n                let edges:any = this.edges = [];\n                let normals:any = this.normals = [];\n                // Allocate the vector arrays for the calculated properties\n                for (i = 0; i < points.length; i++) {\n                    calcPoints.push(new Vector());\n                    edges.push(new Vector());\n                    normals.push(new Vector());\n                };\n           };     \n           this.points = points;\n           this._recalc();\n           return this;    \n       };\n\n        // Computes the calculated collision polygon. Applies the `angle` and `offset` to the original points then recalculates the\n        // edges and normals of the collision polygon.\n        /**\n         * @return {Polygon} This for chaining.\n         */\n       private _recalc():Polygon{\n           let calcPoints = this.calcPoints;\n\n           let edges = this.edges;\n\n           let normals = this.normals;\n\n           let points = this.points;\n\n           let offset = this.offset;\n\n           let angle = this.angle;\n\n           let len = points.length;\n\n           let i;\n\n           for(i = 0; i <len; i++){\n               let calcPoint = calcPoints[i].copy(points[i]);\n               calcPoint.x += offset.x;\n               calcPoint.y += offset.y;\n               if(angle !== 0){\n                   calcPoint.rotate(angle);\n               };\n           };\n\n           for(i = 0;i <len; i++){\n               let p1 = calcPoints[i];\n               let p2 = i < len-1 ? calcPoints[i+1] : calcPoints[0];\n               let e = edges[i].copy(p2).sub(p1);\n               normals[i].copy(e).perp().normalize();\n           };\n\n           return this;\n       };\n\n        // Set the current rotation angle of the polygon.\n        /**\n         * @param {number} angle The current rotation angle (in radians).\n         * @return {Polygon} This for chaining.\n         */\n        setAngle(angle:number):Polygon{\n            this.angle = angle;\n\n            this._recalc();\n\n            return this;\n        };\n\n        // Set the current offset to apply to the `points` before applying the `angle` rotation.\n        /**\n         * @param {Vector} offset The new offset vector.\n         * @return {Polygon} This for chaining.\n         */\n        setOffset(offset:Vector):Polygon{\n            this.offset = offset;\n            \n            this._recalc();\n\n            return this;\n        };\n\n        // Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).\n        //\n        // Note: This changes the **original** points (so any `angle` will be applied on top of this rotation).\n        /**\n         * @param {number} angle The angle to rotate (in radians)\n         * @return {Polygon} This for chaining.\n         */\n        rotate(angle:number):Polygon{\n            let points = this.points;\n            \n            let len = points.length;\n\n            for(var i = 0;i < len; i++){\n                points[i].rotate(angle);\n            };\n\n            this._recalc();\n\n            return this;\n        };\n\n        // Translates the points of this polygon by a specified amount relative to the origin of *its own coordinate\n        // system* (i.e. `pos`).\n        //\n        // This is most useful to change the \"center point\" of a polygon. If you just want to move the whole polygon, change\n        // the coordinates of `pos`.\n        //\n        // Note: This changes the **original** points (so any `offset` will be applied on top of this translation)\n        /**\n         * @param {number} x The horizontal amount to translate.\n         * @param {number} y The vertical amount to translate.\n         * @return {Polygon} This for chaining.\n         */\n        translate(x:number = 0, y:number = 0):Polygon{\n            let points = this.points;\n\n            let len = points.length;\n\n            for(var i = 0; i<len; i++){\n                points[i]['x'] += x;\n                points[i]['y'] += y;\n            };\n\n            this._recalc();\n\n            return this;\n        };\n\n        // Compute the axis-aligned bounding box. Any current state\n        // (translations/rotations) will be applied before constructing the AABB.\n        //\n        // Note: Returns a _new_ `Polygon` each time you call this.\n        /**\n         * @return {Polygon} The AABB\n         */\n        getAABB():Polygon{\n            let points = this.calcPoints;\n\n            let len = points.length;\n\n            let xMin = points[0]['x'];\n            let yMin = points[0]['y'];\n            let xMax = xMin;\n            let yMax = yMin;\n\n            for(var i =1; i<len; i++){\n                let point = points[i];\n\n                if(point['x']<xMin){\n                    xMin = point['x'];\n                } else if(point['x']>xMax){\n                    xMax = point['x'];\n                } \n                if(point['y']<yMin){\n                    yMin = point['y'];\n                } else if(point['y']>yMax){\n                    yMax = point['y'];\n                };\n            };\n            return new Box(this[\"pos\"].clone().add(new Vector(xMin, yMin)), xMax - xMin, yMax - yMin).toPolygon();\n        };\n     \n        // Compute the axis-aligned bounding box. Any current state\n        // (translations/rotations) will be applied before constructing the AABB.\n        //\n        // Note: Returns a _new_ `Box` each time you call this.\n        /**\n         * @return {Box} The AABB\n         */\n        getAABBBox():Box{\n            let points = this.calcPoints;\n\n            let len = points.length;\n\n            let xMin = points[0]['x'];\n            let yMin = points[0]['y'];\n            let xMax = xMin;\n            let yMax = yMin;\n\n            for(var i =1; i<len; i++){\n                let point = points[i];\n\n                if(point['x']<xMin){\n                    xMin = point['x'];\n                } else if(point['x']>xMax){\n                    xMax = point['x'];\n                } \n                if(point['y']<yMin){\n                    yMin = point['y'];\n                } else if(point['y']>yMax){\n                    yMax = point['y'];\n                };\n            };\n            return new Box(this[\"pos\"].clone().add(new Vector(xMin, yMin)), xMax - xMin, yMax - yMin);\n        };\n\n        // Compute the centroid (geometric center) of the polygon. Any current state\n        // (translations/rotations) will be applied before computing the centroid.\n        //\n        // See https://en.wikipedia.org/wiki/Centroid#Centroid_of_a_polygon\n        //\n        // Note: Returns a _new_ `Vector` each time you call this.\n        /**\n         * @return {Vector} A Vector that contains the coordinates of the Centroid.\n         */\n        getCentroid():Vector{\n            let points = this['calcPoints'];\n\n            let len = points.length;\n\n            let cx = 0;\n            let cy = 0;\n            let ar = 0;\n\n            for(var i = 0; i < len; i++){\n                let p1 = points[i];\n\n                let p2 = i === len - 1 ? points[0] : points[i+1];\n\n                var a = p1['x'] *p2['y'] - p1['y']*p2['x'];\n                cx += (p1['x'] + p2['x']) * a;\n                cy += (p1['y'] + p2['y']) * a;\n                ar += a;\n            };\n\n            ar = ar * 3;\n            cx = cx / ar;\n            cy = cy / ar;\n            \n            return new Vector(cx, cy);\n        };\n\n        // dummy function to allow use of any SAT Types easily\n        toPolygon(): Polygon {\n            return this;\n        }\n   };\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/polygon.ts","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_is-object.js\n// module id = 7\n// module chunks = 0","import { Box, Circle, Polygon, Vector } from \"../math/index\";\n\nexport default class Response{\n    // ## Response\n    //\n    // An object representing the result of an intersection. Contains:\n    //  - The two objects participating in the intersection\n    //  - The vector representing the minimum change necessary to extract the first object\n    //    from the second one (as well as a unit vector in that direction and the magnitude\n    //    of the overlap)\n    //  - Whether the first object is entirely inside the second, and vice versa.\n    /**\n     * @constructor\n     */\n    constructor(){\n        this.a = null;\n        this.b = null;\n        this.overlapN = new Vector();\n        this.overlapV = new Vector();\n        this.clear();\n    };\n\n    a: Polygon | Circle | Box;\n\n    b: Polygon | Circle | Box;\n\n    overlapN: Vector;\n\n    overlapV: Vector;\n\n    aInB: boolean;\n\n    bInA: boolean;\n\n    overlap: number;\n\n    clear(){\n        this.aInB = true;\n\n        this.bInA = true;\n\n        this.overlap = Number.MAX_VALUE;\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/collision/response.ts","var core = module.exports = { version: '2.6.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_core.js\n// module id = 9\n// module chunks = 0","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_fails.js\n// module id = 10\n// module chunks = 0","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_global.js\n// module id = 11\n// module chunks = 0","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_object-dp.js\n// module id = 12\n// module chunks = 0","import { Circle } from '../index';\nimport { Box, Vector } from '../math';\nimport Polygon from '../math/polygon';\nimport Response from './response';\n\n// ## Object Pools\n\n// A pool of `Vector` objects that are used in calculations to avoid\n// allocating memory.\n/**\n * @type {Array.<Vector>}\n */\nlet T_VECTORS: Array<Vector> = [];\n\nfor (var i = 0; i < 10; i++) {\n  T_VECTORS.push(new Vector());\n}\n\n// A pool of arrays of numbers used in calculations to avoid allocating\n// memory.\n/**\n * @type {Array.<Array.<number>>}\n */\nlet T_ARRAYS: Array<Array<number>> = [];\n\nfor (var i = 0; i < 5; i++) {\n  T_ARRAYS.push([]);\n}\n\n// Temporary response used for polygon hit detection.\n/**\n * @type {Response}\n */\nlet T_RESPONSE = new Response();\n\n// Tiny \"point\" polygon used for polygon hit detection.\n/**\n * @type {Polygon}\n */\nlet TEST_POINT = new Box(new Vector(), 0.000001, 0.000001).toPolygon();\n\n// ## Helper Functions\n\n// Flattens the specified array of points onto a unit vector axis,\n// resulting in a one dimensional range of the minimum and\n// maximum value on that axis.\n/**\n * @param {Array.<Vector>} points The points to flatten.\n * @param {Vector} normal The unit vector axis to flatten on.\n * @param {Array.<number>} result An array.  After calling this function,\n *   result[0] will be the minimum value,\n *   result[1] will be the maximum value.\n */\n\nfunction flattenPointsOn(\n  points: Array<Vector>,\n  normal: Vector,\n  result: Array<number>,\n) {\n  let min = Number.MAX_VALUE;\n\n  let max = -Number.MAX_VALUE;\n\n  let len = points.length;\n\n  for (var i = 0; i < len; i++) {\n    // The magnitude of the projection of the point onto the normal\n    let dot = points[i].dot(normal);\n    if (dot < min) min = dot;\n    if (dot > max) max = dot;\n  }\n  result[0] = min;\n  result[1] = max;\n}\n\n// Check whether two convex polygons are separated by the specified\n// axis (must be a unit vector).\n/**\n * @param {Vector} aPos The position of the first polygon.\n * @param {Vector} bPos The position of the second polygon.\n * @param {Array.<Vector>} aPoints The points in the first polygon.\n * @param {Array.<Vector>} bPoints The points in the second polygon.\n * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons\n *   will be projected onto this axis.\n * @param {Response=} response A Response object (optional) which will be populated\n *   if the axis is not a separating axis.\n * @return {boolean} true if it is a separating axis, false otherwise.  If false,\n *   and a response is passed in, information about how much overlap and\n *   the direction of the overlap will be populated.\n */\nexport function isSeparatingAxis(\n  aPos: Vector,\n  bPos: Vector,\n  aPoints: Array<Vector>,\n  bPoints: Array<Vector>,\n  axis: Vector,\n  response?: Response,\n): boolean {\n  let rangeA = T_ARRAYS.pop();\n\n  let rangeB = T_ARRAYS.pop();\n\n  // The magnitude of the offset between the two polygons\n  let offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);\n  let projectedOffset = offsetV.dot(axis);\n\n  // Project the polygons onto the axis.\n  flattenPointsOn(aPoints, axis, rangeA);\n  flattenPointsOn(bPoints, axis, rangeB);\n\n  // Move B's range to its position relative to A.\n  rangeB[0] += projectedOffset;\n  rangeB[1] += projectedOffset;\n\n  if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\n    T_VECTORS.push(offsetV);\n    T_ARRAYS.push(rangeA);\n    T_ARRAYS.push(rangeB);\n    return true;\n  }\n\n  // This is not a separating axis. If we're calculating a response, calculate the overlap.\n  if (response) {\n    let overlap = 0;\n    // A starts further left than B\n    if (rangeA[0] < rangeB[0]) {\n      response['aInB'] = false;\n      // A ends before B does. We have to pull A out of B\n      if (rangeA[1] < rangeB[1]) {\n        overlap = rangeA[1] - rangeB[0];\n        response['bInA'] = false;\n        // B is fully inside A.  Pick the shortest way out.\n      } else {\n        let option1 = rangeA[1] - rangeB[0];\n        let option2 = rangeB[1] - rangeA[0];\n        overlap = option1 < option2 ? option1 : -option2;\n      }\n    } else {\n      response['bInA'] = false;\n      // B ends before A ends. We have to push A out of B\n      if (rangeA[1] > rangeB[1]) {\n        overlap = rangeA[0] - rangeB[1];\n        response['aInB'] = false;\n      } else {\n        // A is fully inside B.  Pick the shortest way out.\n        var option1 = rangeA[1] - rangeB[0];\n        var option2 = rangeB[1] - rangeA[0];\n        overlap = option1 < option2 ? option1 : -option2;\n      }\n    }\n    // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\n    let absOverlap = Math.abs(overlap);\n    if (absOverlap < response['overlap']) {\n      response['overlap'] = absOverlap;\n      response['overlapN'].copy(axis);\n      if (overlap < 0) {\n        response['overlapN'].reverse();\n      }\n    }\n  }\n  T_VECTORS.push(offsetV);\n  T_ARRAYS.push(rangeA);\n  T_ARRAYS.push(rangeB);\n  return false;\n}\n\n// Constants for Voronoi regions\n/**\n * @const\n */\nconst LEFT_VORONOI_REGION = -1;\n/**\n * @const\n */\nconst MIDDLE_VORONOI_REGION = 0;\n/**\n * @const\n */\nconst RIGHT_VORONOI_REGION = 1;\n\n// Calculates which Voronoi region a point is on a line segment.\n// It is assumed that both the line and the point are relative to `(0,0)`\n//\n//            |       (0)      |\n//     (-1)  [S]--------------[E]  (1)\n//            |       (0)      |\n/**\n * @param {Vector} line The line segment.\n * @param {Vector} point The point.\n * @return  {number} LEFT_VORONOI_REGION (-1) if it is the left region,\n *          MIDDLE_VORONOI_REGION (0) if it is the middle region,\n *          RIGHT_VORONOI_REGION (1) if it is the right region.\n */\n\nfunction voronoiRegion(line: Vector, point: Vector): number {\n  let len2 = line.len2();\n\n  let dp = point.dot(line);\n  // If the point is beyond the start of the line, it is in the\n  // left voronoi region.\n  if (dp < 0) {\n    return LEFT_VORONOI_REGION;\n    // If the point is beyond the end of the line, it is in the\n    // right voronoi region.\n  } else if (dp > len2) {\n    return RIGHT_VORONOI_REGION;\n    // Otherwise, it's in the middle one.\n  } else {\n    return MIDDLE_VORONOI_REGION;\n  }\n}\n\n// ## Collision Tests\n\n// Check if a point is inside a circle.\n/**\n * @param {Vector} p The point to test.\n * @param {Circle} c The circle to test.\n * @return {boolean} true if the point is inside the circle, false if it is not.\n */\n\nexport function pointInCircle(p: Vector, c: Circle): boolean {\n  let differenceV = T_VECTORS.pop().copy(p).sub(c['pos']);\n  let radiusSq = c['r'] * c['r'];\n  let distanceSq = differenceV.len2();\n  T_VECTORS.push(differenceV);\n  // If the distance between is smaller than the radius then the point is inside the circle.\n  return distanceSq <= radiusSq;\n}\n\n// Checks whether polygons collide.\n/**\n * @param {Polygon} a The first polygon.\n * @param {Polygon} b The second polygon.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\nexport function testPolygonPolygon(\n  a: Polygon,\n  b: Polygon,\n  response?: Response,\n) {\n  let aPoints = a['calcPoints'];\n  let aLen = aPoints.length;\n\n  let bPoints = b['calcPoints'];\n  let bLen = bPoints.length;\n\n  // If any of the edge normals of A is a separating axis, no intersection.\n  for (let i = 0; i < aLen; i++) {\n    if (\n      isSeparatingAxis(\n        a['pos'],\n        b['pos'],\n        aPoints,\n        bPoints,\n        a['normals'][i],\n        response,\n      )\n    ) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < bLen; i++) {\n    if (\n      isSeparatingAxis(\n        a['pos'],\n        b['pos'],\n        aPoints,\n        bPoints,\n        b['normals'][i],\n        response,\n      )\n    ) {\n      return false;\n    }\n  }\n\n  // Since none of the edge normals of A or B are a separating axis, there is an intersection\n  // and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the\n  // final overlap vector.\n  if (response) {\n    response['a'] = a;\n    response['b'] = b;\n    response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\n  }\n  return true;\n}\n\n// Check if a point is inside a convex polygon.\n/**\n * @param {Vector} p The point to test.\n * @param {Polygon} poly The polygon to test.\n * @return {boolean} true if the point is inside the polygon, false if it is not.\n */\nexport function pointInPolygon(p: Vector, poly: Polygon): boolean {\n  TEST_POINT['pos'].copy(p);\n  T_RESPONSE.clear();\n  let result = testPolygonPolygon(TEST_POINT, poly, T_RESPONSE);\n  if (result) {\n    result = T_RESPONSE['aInB'];\n  }\n  return result;\n}\n\n// Check if two circles collide.\n/**\n * @param {Circle} a The first circle.\n * @param {Circle} b The second circle.\n * @param {Response=} response Response object (optional) that will be populated if\n *   the circles intersect.\n * @return {boolean} true if the circles intersect, false if they don't.\n */\nexport function testCircleCircle(a: Circle, b: Circle, response?: Response) {\n  // Check if the distance between the centers of the two\n  // circles is greater than their combined radius.\n  let differenceV = T_VECTORS.pop().copy(b['pos']).sub(a['pos']);\n  let totalRadius = a['r'] + b['r'];\n  let totalRadiusSq = totalRadius * totalRadius;\n  let distanceSq = differenceV.len2();\n  // If the distance is bigger than the combined radius, they don't intersect.\n  if (distanceSq > totalRadiusSq) {\n    T_VECTORS.push(differenceV);\n    return false;\n  }\n  // They intersect.  If we're calculating a response, calculate the overlap.\n  if (response) {\n    let dist = Math.sqrt(distanceSq);\n    response['a'] = a;\n    response['b'] = b;\n    response['overlap'] = totalRadius - dist;\n    response['overlapN'].copy(differenceV.normalize());\n    response['overlapV'].copy(differenceV).scale(response['overlap']);\n    response['aInB'] = a['r'] <= b['r'] && dist <= b['r'] - a['r'];\n    response['bInA'] = b['r'] <= a['r'] && dist <= a['r'] - b['r'];\n  }\n  T_VECTORS.push(differenceV);\n  return true;\n}\n\n// Check if a polygon and a circle collide.\n/**\n * @param {Polygon} polygon The polygon.\n * @param {Circle} circle The circle.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\nexport function testPolygonCircle(\n  polygon: Polygon,\n  circle: Circle,\n  response?: Response,\n) {\n  // Get the position of the circle relative to the polygon.\n  let circlePos = T_VECTORS.pop().copy(circle['pos']).sub(polygon['pos']);\n  let radius = circle['r'];\n  let radius2 = radius * radius;\n  let points = polygon['calcPoints'];\n  let len = points.length;\n  let edge = T_VECTORS.pop();\n  let point = T_VECTORS.pop();\n\n  // For each edge in the polygon:\n  for (let i = 0; i < len; i++) {\n    let next = i === len - 1 ? 0 : i + 1;\n    let prev = i === 0 ? len - 1 : i - 1;\n    let overlap = 0;\n    let overlapN = null;\n\n    // Get the edge.\n    edge.copy(polygon['edges'][i]);\n    // Calculate the center of the circle relative to the starting point of the edge.\n    point.copy(circlePos).sub(points[i]);\n\n    // If the distance between the center of the circle and the point\n    // is bigger than the radius, the polygon is definitely not fully in\n    // the circle.\n    if (response && point.len2() > radius2) {\n      response['aInB'] = false;\n    }\n\n    // Calculate which Voronoi region the center of the circle is in.\n    var region = voronoiRegion(edge, point);\n    // If it's the left region:\n    if (region === LEFT_VORONOI_REGION) {\n      // We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.\n      edge.copy(polygon['edges'][prev]);\n      // Calculate the center of the circle relative the starting point of the previous edge\n      var point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);\n      region = voronoiRegion(edge, point2);\n      if (region === RIGHT_VORONOI_REGION) {\n        // It's in the region we want.  Check if the circle intersects the point.\n        var dist = point.len();\n        if (dist > radius) {\n          // No intersection\n          T_VECTORS.push(circlePos);\n          T_VECTORS.push(edge);\n          T_VECTORS.push(point);\n          T_VECTORS.push(point2);\n          return false;\n        } else if (response) {\n          // It intersects, calculate the overlap.\n          response['bInA'] = false;\n          overlapN = point.normalize();\n          overlap = radius - dist;\n        }\n      }\n      T_VECTORS.push(point2);\n      // If it's the right region:\n    } else if (region === RIGHT_VORONOI_REGION) {\n      // We need to make sure we're in the left region on the next edge\n      edge.copy(polygon['edges'][next]);\n      // Calculate the center of the circle relative to the starting point of the next edge.\n      point.copy(circlePos).sub(points[next]);\n      region = voronoiRegion(edge, point);\n      if (region === LEFT_VORONOI_REGION) {\n        // It's in the region we want.  Check if the circle intersects the point.\n        var dist = point.len();\n        if (dist > radius) {\n          // No intersection\n          T_VECTORS.push(circlePos);\n          T_VECTORS.push(edge);\n          T_VECTORS.push(point);\n          return false;\n        } else if (response) {\n          // It intersects, calculate the overlap.\n          response['bInA'] = false;\n          overlapN = point.normalize();\n          overlap = radius - dist;\n        }\n      }\n      // Otherwise, it's the middle region:\n    } else {\n      //To check if the polygon is clockwise, we get the cross product\n      let nextId = (next + 1) % polygon['points'].length;\n      let cross = edge.cross(new Vector(\n        polygon['points'][nextId].x - polygon['points'][i].x,\n        polygon['points'][nextId].y - polygon['points'][i].y))\n      // Need to check if the circle is intersecting the edge,\n      // Change the edge into its \"edge normal\".\n      var normal = edge.perp().normalize();\n      //If it's clockwise, we inverse the normal\n      if (cross < 0\n      ) {\n        normal.reverse();\n      }\n      // Find the perpendicular distance between the center of the\n      // circle and the edge.\n      var dist = point.dot(normal);\n      var distAbs = Math.abs(dist);\n      // If the circle is on the outside of the edge, there is no intersection.\n      if (dist > 0 && distAbs > radius) {\n        // No intersection\n        T_VECTORS.push(circlePos);\n        T_VECTORS.push(normal);\n        T_VECTORS.push(point);\n        return false;\n      } else if (response) {\n        // It intersects, calculate the overlap.\n        overlapN = normal;\n        overlap = radius - dist;\n        // If the center of the circle is on the outside of the edge, or part of the\n        // circle is on the outside, the circle is not fully inside the polygon.\n        if (dist >= 0 || overlap < 2 * radius) {\n          response['bInA'] = false;\n        }\n      }\n    }\n\n    // If this is the smallest overlap we've seen, keep it.\n    // (overlapN may be null if the circle was in the wrong Voronoi region).\n    if (\n      overlapN &&\n      response &&\n      Math.abs(overlap) < Math.abs(response['overlap'])\n    ) {\n      response['overlap'] = overlap;\n      response['overlapN'].copy(overlapN);\n    }\n  }\n\n  // Calculate the final overlap vector - based on the smallest overlap.\n  if (response) {\n    response['a'] = polygon;\n    response['b'] = circle;\n    response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\n  }\n  T_VECTORS.push(circlePos);\n  T_VECTORS.push(edge);\n  T_VECTORS.push(point);\n  return true;\n}\n\n// Check if a circle and a polygon collide.\n//\n// **NOTE:** This is slightly less efficient than polygonCircle as it just\n// runs polygonCircle and reverses everything at the end.\n/**\n * @param {Circle} circle The circle.\n * @param {Polygon} polygon The polygon.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\n\nexport function testCirclePolygon(\n  circle: Circle,\n  polygon: Polygon,\n  response?: Response,\n) {\n  // Test the polygon against the circle.\n  var result = testPolygonCircle(polygon, circle, response);\n  if (result && response) {\n    // Swap A and B in the response.\n    var a = response['a'];\n    var aInB = response['aInB'];\n    response['overlapN'].reverse();\n    response['overlapV'].reverse();\n    response['a'] = response['b'];\n    response['b'] = a;\n    response['aInB'] = response['bInA'];\n    response['bInA'] = aInB;\n  }\n  return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/util.ts","import Polygon from \"./polygon\";\nimport Vector from \"./vector\";\nimport Box from \"./box\";\n\nexport function convertBoxToPolygon(box: {pos: {x: number, y: number}, w: number, h: number}){\n    return new Polygon(new Vector(box.pos.x, box.pos.y),[\n        new Vector(), new Vector(box.w, 0),\n        new Vector(box.w, box.h), new Vector(0,box.h)\n    ]);\n}\n\nexport function getAABBBox(polygon: {pos: {x: number, y: number}, calcPoints?: {x: number, y: number}[], r?: number}){\n    if(polygon.r){\n        let r = polygon.r;\n        let corner = new Vector(polygon.pos.x - r, polygon.pos.y - r);\n        return new Box(corner, r*2, r*2);\n    }\n    let points = polygon.calcPoints;\n    let len = points.length;\n\n    let xMin = points[0]['x'];\n    let yMin = points[0]['y'];\n    let xMax = xMin;\n    let yMax = yMin;\n\n    for(var i =1; i<len; i++){\n        let point = points[i];\n\n        if(point['x']<xMin){\n            xMin = point['x'];\n        } else if(point['x']>xMax){\n            xMax = point['x'];\n        } \n        if(point['y']<yMin){\n            yMin = point['y'];\n        } else if(point['y']>yMax){\n            yMax = point['y'];\n        };\n    };\n    const pos = {x: polygon.pos.x + xMin, y: polygon.pos.y + yMin};\n    return new Box(new Vector(pos.x, pos.y), xMax - xMin, yMax - yMin);\n}\n\n\n// WEBPACK FOOTER //\n// ./src/math/conversion.ts","import {Box, Vector, Circle, Polygon}from './math';\nimport Response from './collision/response';\nimport {testCircleCircle,testPolygonCircle, testPolygonPolygon,testCirclePolygon} from './collision/util';\nimport { convertBoxToPolygon, getAABBBox } from './math/conversion';\n\nexport {Box};\nexport {Vector};\nexport {Circle};\nexport {Polygon};\nexport {Response};\nexport {testCircleCircle};\nexport {testPolygonCircle};\nexport {testPolygonPolygon};\nexport {testCirclePolygon};\nexport {convertBoxToPolygon};\nexport {getAABBBox};\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import Box from './box';\nimport Polygon from './polygon';\nimport Vector from './vector';\n\nexport default class Circle {\n    type: 'circle' = 'circle';\n    pos: Vector;\n\n    r: number;\n\n  // ## Circle\n  //\n  // Represents a circle with a position and a radius.\n\n  // Create a new circle, optionally passing in a position and/or radius. If no position\n  // is given, the circle will be at `(0,0)`. If no radius is provided, the circle will\n  // have a radius of `0`.\n  /**\n   * @param {Vector=} pos A vector representing the position of the center of the circle\n   * @param {?number=} r The radius of the circle\n   * @constructor\n   */\n    constructor(pos:Vector = new Vector(),r:number = 0){\n        this.pos = pos;\n\n        this.r = r;\n    };\n\n    // Compute the axis-aligned bounding box (AABB) of this Circle.\n    //\n    // Note: Returns a _new_ `Polygon` each time you call this.\n    /**\n     * @return {Polygon} The AABB\n     */\n    getAABB():Polygon{\n        let r = this.r;\n        let corner = this.pos.clone().sub(new Vector(r,r));\n        return new Box(corner, r*2, r*2).toPolygon();\n    };\n\n    // Compute the axis-aligned bounding box (AABB) of this Circle.\n    //\n    // Note: Returns a _new_ `Polygon` each time you call this.\n    /**\n     * @return {Polygon} The AABB\n     */\n    getAABBBox():Box{\n        let r = this.r;\n        let corner = this.pos.clone().sub(new Vector(r,r));\n        return new Box(corner, r*2, r*2);\n    };\n\n    // dummy function to allow use of any SAT Types easily\n    toPolygon(): Polygon {\n        return this.getAABB();\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/circle.ts","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/core-js/object/define-property.js\n// module id = 17\n// module chunks = 0","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/fn/object/define-property.js\n// module id = 18\n// module chunks = 0","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_a-function.js\n// module id = 19\n// module chunks = 0","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_an-object.js\n// module id = 20\n// module chunks = 0","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_ctx.js\n// module id = 21\n// module chunks = 0","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_dom-create.js\n// module id = 22\n// module chunks = 0","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_export.js\n// module id = 23\n// module chunks = 0","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_has.js\n// module id = 24\n// module chunks = 0","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_hide.js\n// module id = 25\n// module chunks = 0","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_ie8-dom-define.js\n// module id = 26\n// module chunks = 0","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_property-desc.js\n// module id = 27\n// module chunks = 0","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_to-primitive.js\n// module id = 28\n// module chunks = 0","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/es6.object.define-property.js\n// module id = 29\n// module chunks = 0"],"sourceRoot":""}